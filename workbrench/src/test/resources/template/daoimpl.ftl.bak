package ${packageBase}.dao;

import ${packageBase}.model.${tableBean.tableNameCapitalized}${pojoSuffix};

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementSetter;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;

import javax.persistence.EntityManager;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.domain.Specification;

import java.util.UUID;
import javax.annotation.Resource;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.ndlan.canyin.base.repository.BaseDao;

@Repository("${tableBean.tableNameNoDash}${classPrefix}${daoIntefaceSuffix}")
public class ${tableBean.tableNameCapitalized}${classPrefix}${classSuffix} implements ${tableBean.tableNameCapitalized}${classPrefix}${daoIntefaceSuffix} {
    protected Logger log = Logger.getLogger(this.getClass());

    @Resource
    protected JdbcTemplate ${jdbcTemplateName};

    @Resource
    private NamedParameterJdbcTemplate namedParameter${jdbcTemplateNameCapitalized};

    @Override
    public ${tableBean.tableNameCapitalized}${pojoSuffix} selectByPrimaryKey(${tableBean.pkType} ${tableBean.pkName}) {
        try {
            String sql = "select * from ${tableBean.tableName} where ${tableBean.pkColumnName} = ?";

            List<${tableBean.tableNameCapitalized}${pojoSuffix}> resultList = this.${jdbcTemplateName}.query(sql, new Object[]{${tableBean.pkName}},
                    new RowMapper<${tableBean.tableNameCapitalized}${pojoSuffix}>() {
                        @Override
                        public ${tableBean.tableNameCapitalized}${pojoSuffix} mapRow(ResultSet rs, int rowNum) throws SQLException {
							${tableBean.tableNameCapitalized}${pojoSuffix} bean = new ${tableBean.tableNameCapitalized}${pojoSuffix}();
							<#list tableBean.columnBeanList as columnBean>
                                <#if columnBean.columnType == "Date">
                            Timestamp ${columnBean.columnNameNoDash}Timestamp = rs.getTimestamp("${columnBean.columnName}");
                            if (null != ${columnBean.columnNameNoDash}Timestamp) {
                                bean.set${columnBean.columnNameCapitalized}(new Date(${columnBean.columnNameNoDash}Timestamp.getTime()));
                            }
                                <#else>
                            bean.set${columnBean.columnNameCapitalized}(rs.${columnBean.columnTypeRsGetter}("${columnBean.columnName}"));
                                </#if>
							</#list>
							return bean;
						}
                    });

            if (null == resultList || resultList.isEmpty()) {
                return null;
            } else {
                return resultList.get(0);
            }
        } catch (Exception e) {
            log.error(e.getMessage(), e);
            throw new RuntimeException(e);
        }
    }

    @Override
    public List<${tableBean.tableNameCapitalized}${pojoSuffix}> selectByWhereSql(String whereSql, Object[] params) {
        try {
            String sql;
            if (StringUtils.isBlank(whereSql)) {
                sql = "select * from ${tableBean.tableName} ";
            } else {
                sql = "select * from ${tableBean.tableName} where " + whereSql;
            }

            return this.${jdbcTemplateName}.query(sql, params,
                    new RowMapper<${tableBean.tableNameCapitalized}${pojoSuffix}>() {
                        @Override
                        public ${tableBean.tableNameCapitalized}${pojoSuffix} mapRow(ResultSet rs, int rowNum) throws SQLException {
			${tableBean.tableNameCapitalized}${pojoSuffix} bean = new ${tableBean.tableNameCapitalized}${pojoSuffix}();
			<#list tableBean.columnBeanList as columnBean>
                                <#if columnBean.columnType == "Date">
                            Timestamp ${columnBean.columnNameNoDash}Timestamp = rs.getTimestamp("${columnBean.columnName}");
                            if (null != ${columnBean.columnNameNoDash}Timestamp) {
                                bean.set${columnBean.columnNameCapitalized}(new Date(${columnBean.columnNameNoDash}Timestamp.getTime()));
                            }
                            <#else>
                            bean.set${columnBean.columnNameCapitalized}(rs.${columnBean.columnTypeRsGetter}("${columnBean.columnName}"));
                             </#if>
			  </#list>
			 return bean;
			}
                    });
        } catch (Exception e) {
            log.error(e.getMessage(), e);
            throw new RuntimeException(e);
        }
    }

    @Override
    public List<${tableBean.tableNameCapitalized}${pojoSuffix}> selectByWhereSql(String whereSql, Object[] params, Long startPos, Long num) {
        try {
            String sql;
            if (StringUtils.isBlank(whereSql)) {
                sql = "select * from ${tableBean.tableName} ";
            } else {
                sql = "select * from ${tableBean.tableName} where " + whereSql;
            }

            if(null == startPos) {
                startPos = new Long(0);
            }
            if(null == num) {
                num = new Long(0);
            }

            sql += String.format(" limit %d,%d", startPos, num);

            return this.${jdbcTemplateName}.query(sql, params,
                    new RowMapper<${tableBean.tableNameCapitalized}${pojoSuffix}>() {
                        @Override
                        public ${tableBean.tableNameCapitalized}${pojoSuffix} mapRow(ResultSet rs, int rowNum) throws SQLException {
				${tableBean.tableNameCapitalized}${pojoSuffix} bean = new ${tableBean.tableNameCapitalized}${pojoSuffix}();
			   <#list tableBean.columnBeanList as columnBean>
                                <#if columnBean.columnType == "Date">
                            Timestamp ${columnBean.columnNameNoDash}Timestamp = rs.getTimestamp("${columnBean.columnName}");
                            if (null != ${columnBean.columnNameNoDash}Timestamp) {
                                bean.set${columnBean.columnNameCapitalized}(new Date(${columnBean.columnNameNoDash}Timestamp.getTime()));
                            }
                                <#else>
                            bean.set${columnBean.columnNameCapitalized}(rs.${columnBean.columnTypeRsGetter}("${columnBean.columnName}"));
                                </#if>
							</#list>
							return bean;
						}
                    });
        } catch (Exception e) {
            log.error(e.getMessage(), e);
            throw new RuntimeException(e);
        }
    }

    @Override
    public List<${tableBean.tableNameCapitalized}${pojoSuffix}> selectAll() {
        return selectByWhereSql(null, null);
    }

    @Override
    public long count(String whereSql, Object[] params) {
        try {
            String sql;
            if (StringUtils.isBlank(whereSql)) {
                sql = "select count(1) numCount from ${tableBean.tableName} ";
            } else {
                sql = "select count(1) numCount from ${tableBean.tableName} where " + whereSql;
            }

            return this.${jdbcTemplateName}.queryForObject(sql, params,
                    new RowMapper<Long>() {
                        @Override
                        public Long mapRow(ResultSet rs, int rowNum) throws SQLException {
                            return rs.getLong("numCount");
                        }
                    });
        } catch (Exception e) {
            log.error(e.getMessage(), e);
            throw new RuntimeException(e);
        }
    }

    @Override
    public int insertSelective(${tableBean.tableNameCapitalized}${pojoSuffix} ${tableBean.tableNameNoDash}) {
        try {
            if (null == ${tableBean.tableNameNoDash}) {
                return 0;
            }

            StringBuilder sql = new StringBuilder("insert into ${tableBean.tableName}(");
            List<Object> columns = new ArrayList<Object>();
            List<Object> values = new ArrayList<Object>();

            <#list tableBean.columnBeanList as columnBean>
            if (null != ${tableBean.tableNameNoDash}.get${columnBean.columnNameCapitalized}()) {
                columns.add("${columnBean.columnName}");
                values.add(${tableBean.tableNameNoDash}.get${columnBean.columnNameCapitalized}());
            }
            </#list>

            if (columns.isEmpty()) {
                return 0;
            }

            sql.append(StringUtils.join(columns, ',')).append(") values (");

            List<String> questions = new ArrayList<String>(columns.size());
            for (Object column : columns) {
                questions.add("?");
            }
			
            sql.append(StringUtils.join(questions, ',')).append(")");

            return ${jdbcTemplateName}.update(sql.toString(), values.toArray());
        } catch (Exception e) {
            log.error(e.getMessage(), e);
            throw new RuntimeException(e);
        }
    }

    @Override
    public int insertSelectiveAndGetId(${tableBean.tableNameCapitalized}${pojoSuffix} ${tableBean.tableNameNoDash}) {
        try {
            if (null == ${tableBean.tableNameNoDash}) {
                return 0;
            }

            StringBuilder sql = new StringBuilder("insert into ${tableBean.tableName}(");
            List<Object> columns = new ArrayList<Object>();
            List<Object> parameters = new ArrayList<Object>();

            <#list tableBean.columnBeanList as columnBean>
            if (null != ${tableBean.tableNameNoDash}.get${columnBean.columnNameCapitalized}()) {
                columns.add("${columnBean.columnName}");
                parameters.add(":${columnBean.columnNameNoDash}");
            }
            </#list>

            if (columns.isEmpty()) {
                return 0;
            }

            sql.append(StringUtils.join(columns, ',')).append(") values (").append(StringUtils.join(parameters, ',')).append(")");
			
			SqlParameterSource ps = new BeanPropertySqlParameterSource(${tableBean.tableNameNoDash});
            KeyHolder keyholder = new GeneratedKeyHolder();
	    if(null==namedParameter${jdbcTemplateNameCapitalized}){
		namedParameter${jdbcTemplateNameCapitalized}=new NamedParameterJdbcTemplate(${jdbcTemplateName});
	    }

            int updateNums = namedParameter${jdbcTemplateNameCapitalized}.update(sql.toString(), ps, keyholder);
            ${tableBean.pkType} m = keyholder.getKey().toString();
	    // String key=UUID.randomUUID().toString()
	     ${tableBean.tableNameNoDash}.set${tableBean.pkColumnNameCapitalized}(m);
			
            return updateNums;
        } catch (Exception e) {
            log.error(e.getMessage(), e);
            throw new RuntimeException(e);
        }
    }

    @Override
    public int updateByPrimaryKeySelective(${tableBean.tableNameCapitalized}${pojoSuffix} ${tableBean.tableNameNoDash}) {
        try {
            if (null == ${tableBean.tableNameNoDash}.get${tableBean.pkColumnNameCapitalized}()) {
                throw new RuntimeException("updateByPrimaryKeySelective fail! ID can not be null");
            }

            StringBuilder sql = new StringBuilder("UPDATE ${tableBean.tableName} SET ");

            List<String> updateSql = new ArrayList<String>();
            List<Object> params = new ArrayList<Object>();
            <#list tableBean.columnBeanList as columnBean>
            if (null != ${tableBean.tableNameNoDash}.get${columnBean.columnNameCapitalized}()) {
                updateSql.add("${columnBean.columnName} = ?");
                params.add(${tableBean.tableNameNoDash}.get${columnBean.columnNameCapitalized}());
            }
            </#list>

            if (updateSql.isEmpty()) { // all fields is null, nothing to update
                return 0;
            }

            sql.append(StringUtils.join(updateSql, ", ")).append(" WHERE ${tableBean.pkColumnName} = ?");
            params.add(${tableBean.tableNameNoDash}.get${tableBean.pkColumnNameCapitalized}());

            return this.${jdbcTemplateName}.update(sql.toString(), params.toArray());
        } catch (Exception e) {
            log.error(e.getMessage(), e);
            throw new RuntimeException(e);
        }
    }

    @Override
    public int update(String sql, Object... args) {
        return this.${jdbcTemplateName}.update(sql, args);
    }

    @Override
    public int update(String sql, PreparedStatementSetter pss) {
        return this.${jdbcTemplateName}.update(sql, pss);
    }

    @Override
    public int deleteByPrimaryKey(${tableBean.pkType} ${tableBean.pkName}) {
            if(null ==  ${tableBean.pkName}) {
            return 0;
        }

        String sql = "delete from ${tableBean.tableName} where ${tableBean.pkColumnName}  = ?";
        return ${jdbcTemplateName}.update(sql, ${tableBean.pkName});
    }

    @Override
    public int deleteByWhereSql(String whereSql, Object[] params) {
        if(StringUtils.isBlank(whereSql)) {
            return 0;
        }

        String sql = "DELETE from ${tableBean.tableName} where " + whereSql;
        return this.${jdbcTemplateName}.update(sql, params);
    }

	//////////////////////No Used
	 @Override
	public EntityManager getEntityManager() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void batchInsert(List<${tableBean.tableNameCapitalized}${pojoSuffix}> paramList) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void batchUpdate(List<${tableBean.tableNameCapitalized}${pojoSuffix}> paramList) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void batchDelete(List<${tableBean.tableNameCapitalized}${pojoSuffix}> paramList) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void batchDelete(String[] paramArrayOfString) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void saveWithId(${tableBean.tableNameCapitalized}${pojoSuffix} paramT) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public Iterable<${tableBean.tableNameCapitalized}${pojoSuffix}> findAll(Sort arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Page<${tableBean.tableNameCapitalized}${pojoSuffix}> findAll(Pageable arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public long count() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public void delete(String arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void delete(${tableBean.tableNameCapitalized}${pojoSuffix} arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void delete(Iterable<? extends ${tableBean.tableNameCapitalized}${pojoSuffix}> arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void deleteAll() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean exists(String arg0) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Iterable<${tableBean.tableNameCapitalized}${pojoSuffix}> findAll() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Iterable<${tableBean.tableNameCapitalized}${pojoSuffix}> findAll(Iterable<String> arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ${tableBean.tableNameCapitalized}${pojoSuffix} findOne(String arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public <S extends ${tableBean.tableNameCapitalized}${pojoSuffix}> S save(S arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public <S extends ${tableBean.tableNameCapitalized}${pojoSuffix}> Iterable<S> save(
			Iterable<S> arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public long count(Specification<${tableBean.tableNameCapitalized}${pojoSuffix}> arg0) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public List<${tableBean.tableNameCapitalized}${pojoSuffix}> findAll(
			Specification<${tableBean.tableNameCapitalized}${pojoSuffix}> arg0) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Page<${tableBean.tableNameCapitalized}${pojoSuffix}> findAll(
			Specification<${tableBean.tableNameCapitalized}${pojoSuffix}> arg0, Pageable arg1) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<${tableBean.tableNameCapitalized}${pojoSuffix}> findAll(
			Specification<${tableBean.tableNameCapitalized}${pojoSuffix}> arg0, Sort arg1) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ${tableBean.tableNameCapitalized}${pojoSuffix} findOne(
			Specification<${tableBean.tableNameCapitalized}${pojoSuffix}> arg0) {
		// TODO Auto-generated method stub
		return null;
	}
}
